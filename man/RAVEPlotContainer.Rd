% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-RAVEPlotData.R
\name{RAVEPlotContainer}
\alias{RAVEPlotContainer}
\title{'RAVE' plot container class}
\value{
The data value if key is found, or a missing value when key is missing

The derivative value if key is found, or a missing value when
the key is missing. The derivative will be "processed". When the
derivative is a function, then the function will be called with all the
data (see \code{set_data}) passed as named arguments (see 'Examples').
When \code{use_glue} is true, then the derivative will be passed into
\code{\link[raveio]{glue}} for lazy assessment (see 'Examples').

A named list of derivatives

\code{NULL} if no errors found, or a matrix of two columns
when \code{fail='inspect'}: the first column is the validation name, and
the second column is the error message
}
\description{
Container to generate 'RAVE' built-in figures
}
\examples{

library(ravedash)

# Low-level usage
container <- RAVEPlotContainer$new()

# set data
container$set_data("x", 1:10)
container$set_data("y", 1:20)
container$set_data("data", matrix(1:200, nrow = 10))

# derivative data can be dynamically calculated
container$set_derivative("zlim", function(data) {
  max(abs(range(data, na.rm = TRUE))) * c(-1,1)
})
container$set_derivative("title", "x: {{ length(x) }}, y: {{ length(y) }}",
                       use_glue = TRUE)

# optional, reset renderer state
container$reset("renderers")

container$add_renderer({
  image(data, x = x, y = y, zlim = zlim, main = title)
})

container$add_renderer({
  image(t(data), x = y, y = x, zlim = zlim, main = title)

  # renderer will go through with a warning
  stop(123)
})

container$add_renderer({
  plot(x)
}, order = 3)

# Pre-pend renderers
container$add_renderer({
  par(mfrow = c(1, 3))
}, order = -1)

# reset status
container$add_renderer({
  logger("Reset graphical status")
  par(mfrow = c(1,1))
}, order = 100)


# Render all
plot(container)

# Partial render
plot(container, order_range = 3)




## ------------------------------------------------
## Method `RAVEPlotContainer$get_derivative`
## ------------------------------------------------


container <- RAVEPlotContainer$new()
container$set_derivative("xlen", function(x) {
  length(x)
})
container$set_derivative(
  key = "xlab",
  "x ({{ typeof(x) }})",
  use_glue = TRUE
)
container$set_data("x", letters)
container$get_derivative("xlen")
container$get_derivative("xlab")

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{verbose}}{whether to verbose information, warnings}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{validator_names}}{names of validation expressions}

\item{\code{data_names}}{names of data variables}

\item{\code{derivative_names}}{names of derivative variables}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RAVEPlotContainer-new}{\code{RAVEPlotContainer$new()}}
\item \href{#method-RAVEPlotContainer-reset}{\code{RAVEPlotContainer$reset()}}
\item \href{#method-RAVEPlotContainer-mset}{\code{RAVEPlotContainer$mset()}}
\item \href{#method-RAVEPlotContainer-set_data}{\code{RAVEPlotContainer$set_data()}}
\item \href{#method-RAVEPlotContainer-get_data}{\code{RAVEPlotContainer$get_data()}}
\item \href{#method-RAVEPlotContainer-remove_data}{\code{RAVEPlotContainer$remove_data()}}
\item \href{#method-RAVEPlotContainer-set_derivative}{\code{RAVEPlotContainer$set_derivative()}}
\item \href{#method-RAVEPlotContainer-get_derivative}{\code{RAVEPlotContainer$get_derivative()}}
\item \href{#method-RAVEPlotContainer-get_all_derivative}{\code{RAVEPlotContainer$get_all_derivative()}}
\item \href{#method-RAVEPlotContainer-remove_derivative}{\code{RAVEPlotContainer$remove_derivative()}}
\item \href{#method-RAVEPlotContainer-add_validator}{\code{RAVEPlotContainer$add_validator()}}
\item \href{#method-RAVEPlotContainer-remove_validator}{\code{RAVEPlotContainer$remove_validator()}}
\item \href{#method-RAVEPlotContainer-validate}{\code{RAVEPlotContainer$validate()}}
\item \href{#method-RAVEPlotContainer-format}{\code{RAVEPlotContainer$format()}}
\item \href{#method-RAVEPlotContainer-add_renderer}{\code{RAVEPlotContainer$add_renderer()}}
\item \href{#method-RAVEPlotContainer-render}{\code{RAVEPlotContainer$render()}}
\item \href{#method-RAVEPlotContainer-plot}{\code{RAVEPlotContainer$plot()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-new"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-new}{}}}
\subsection{Method \code{new()}}{
Constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-reset"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-reset}{}}}
\subsection{Method \code{reset()}}{
Reset \code{'renderers'}, \code{'data'}, \code{'derivative'}, settings,
or \code{'validator'}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$reset(
  type = c("renderers", "all", "data", "derivative", "validator")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{type of data to reset}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-mset"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-mset}{}}}
\subsection{Method \code{mset()}}{
Low-level set data or derivative
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$mset(
  ...,
  .list = list(),
  type = c("data", "derivative"),
  validate = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{..., .list}}{named key-value pairs to be stored}

\item{\code{type}}{type of data, \code{'data'} or \code{'derivative'}}

\item{\code{validate}}{whether to validate the data; when error occurs, the
container state will be restored to previous state}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-set_data"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-set_data}{}}}
\subsection{Method \code{set_data()}}{
Store data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$set_data(key, value, validate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{name of data}

\item{\code{value}}{value of the key to be stored}

\item{\code{validate}}{whether to validate data; default is true; when error
occurs, the container state will be restored to previous state}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-get_data"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-get_data}{}}}
\subsection{Method \code{get_data()}}{
Get data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$get_data(key, if_missing)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{key of data}

\item{\code{if_missing}}{return this value when key is missing}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-remove_data"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-remove_data}{}}}
\subsection{Method \code{remove_data()}}{
Remove data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$remove_data(keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{one or more keys to remove}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-set_derivative"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-set_derivative}{}}}
\subsection{Method \code{set_derivative()}}{
Store a derivative
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$set_derivative(
  key,
  value,
  use_glue = FALSE,
  validate = TRUE,
  order = 0
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{name of the derivative}

\item{\code{value}}{value of the derivative; can be an arbitrary value; some
special treatments will be done to characters and functions. See
\code{get_derivative} for details.}

\item{\code{use_glue}}{whether to glue the derivative; default is false}

\item{\code{validate}}{whether to validate data; default is true; when error
occurs, the container state will be restored to previous state}

\item{\code{order}}{order of the derivative, other derivatives with smaller
order will be available during evaluation}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-get_derivative"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-get_derivative}{}}}
\subsection{Method \code{get_derivative()}}{
Get derivative
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$get_derivative(
  key,
  if_missing = NULL,
  env = parent.frame(),
  .internal = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{key of the derivative}

\item{\code{if_missing}}{return this value when key is missing}

\item{\code{env}}{environment to evaluate derivatives}

\item{\code{.internal}}{internally used}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
container <- RAVEPlotContainer$new()
container$set_derivative("xlen", function(x) {
  length(x)
})
container$set_derivative(
  key = "xlab",
  "x ({{ typeof(x) }})",
  use_glue = TRUE
)
container$set_data("x", letters)
container$get_derivative("xlen")
container$get_derivative("xlab")

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-get_all_derivative"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-get_all_derivative}{}}}
\subsection{Method \code{get_all_derivative()}}{
Get all the derivatives in a list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$get_all_derivative(env = parent.frame(), .internal = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{environment to evaluate derivatives}

\item{\code{.internal}}{internally used; please do not change}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-remove_derivative"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-remove_derivative}{}}}
\subsection{Method \code{remove_derivative()}}{
Remove derivatives
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$remove_derivative(keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{one or more keys to remove}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-add_validator"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-add_validator}{}}}
\subsection{Method \code{add_validator()}}{
Add functions to validate the container
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$add_validator(name, fun)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name (ID) of the \code{'validator'}; if name exists, then old
validation function will be replaced.}

\item{\code{fun}}{validation function, must take one argument (this container)
as the argument}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-remove_validator"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-remove_validator}{}}}
\subsection{Method \code{remove_validator()}}{
Remove a validation function by name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$remove_validator(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the validation function to remove}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-validate"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-validate}{}}}
\subsection{Method \code{validate()}}{
Validate data integrity of container
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$validate(fail = c("error", "inspect"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fail}}{action when validation fails; default is the throw the first
\code{'error'}; other choices are \code{'inspect'} (run all the
validation and report all the errors in matrix)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-format"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-format}{}}}
\subsection{Method \code{format()}}{
Format the container
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-add_renderer"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-add_renderer}{}}}
\subsection{Method \code{add_renderer()}}{
Add render expressions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$add_renderer(expr, quoted = FALSE, order = 0, label = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{R expression; all the data and derivatives will be available
as variables; please make sure all the global variables in \code{expr}
come from data or derivatives, or the rendering results might error
out. See \code{\link{bquote}} on how to partial evaluate variables (
and set \code{quoted} to true if \code{expr} is (partially) quoted).}

\item{\code{quoted}}{whether \code{expr} is quoted; default is false}

\item{\code{order}}{render order; smaller values will be rendered first;
default value is 0. See \code{order_range} in \code{$render} method
for selective render}

\item{\code{label}}{label of the render expression, can be missing, mainly
for verbose and debug use.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-render"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-render}{}}}
\subsection{Method \code{render()}}{
Render the container
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$render(
  ...,
  .list = list(),
  order_range = c(-1, 100),
  env = parent.frame(),
  validate = TRUE,
  strict = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{..., .list}}{additional parameters to use for evaluating rendering
expressions; can be used to mask out derivatives or add flags (
data will not be masked out)}

\item{\code{order_range}}{range of render expressions to evaluate; rendering
order outside of this range will not be evaluated}

\item{\code{env}}{environment to rendering the container; default is the caller
environment}

\item{\code{validate}}{whether to validate the container first before rendering}

\item{\code{strict}}{whether to be strict: if true, then stops
when any render function error out; or keep rendering regardless of
errors}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEPlotContainer-plot"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEPlotContainer-plot}{}}}
\subsection{Method \code{plot()}}{
Render the container, see \code{$render} method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEPlotContainer$plot(..., env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{..., env}}{passed to \code{$render} method}
}
\if{html}{\out{</div>}}
}
}
}
