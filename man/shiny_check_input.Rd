% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny-utils.R
\name{shiny_check_input}
\alias{shiny_check_input}
\title{Check shiny inputs and modify if validation fails}
\usage{
shiny_check_input(
  inputId,
  check = NULL,
  on_check_fails,
  ...,
  quoted = FALSE,
  env = parent.frame(),
  logger_level = c("trace", "none", "debug", "info", "warning", "error"),
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{inputId}{character, input ID}

\item{check}{either a function that takes the input value or a character
of a \code{checkmate} function; when \code{check} is a character, this
function will look for \code{check_*} functions in the \code{checkmate}
package}

\item{on_check_fails}{value to substitute when check fails, and the input
value will be the result of \code{on_check_fails}. This argument can be
missing; when missing, input value will not be altered}

\item{...}{passed to \code{check} function}

\item{quoted}{whether \code{on_check_fails} is quoted}

\item{env}{environment to evaluate \code{on_check_fails}}

\item{logger_level}{log level when validation fails}

\item{session}{shiny session; default is current session}
}
\value{
A shiny observe instance
}
\description{
Check shiny inputs and modify if validation fails
}
\examples{

if(interactive()) {

library(ravedash)
shiny::shinyApp(
  ui = shiny::basicPage(
    shiny::textInput("id1", "Enter a text"),
    shiny::textOutput("id2")
  ),
  server = function(input, output, session) {
    # input$id1 must have at least 1 character
    # the check uses `checkmate::check_character`
    shiny_check_input(
      "id1",
      check = "character",
      min.chars = 1,
      on_check_fails = "altered text"
    )

    output$id2 <- shiny::renderText({
      print(input$id1)
      sprintf("The final value is: \%s", input$id1)
    })
  }
)

}

}
