% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval-safe.R
\name{safe_observe}
\alias{safe_observe}
\title{Safe-wrapper of 'shiny' \code{\link[shiny]{observe}} function}
\usage{
safe_observe(
  x,
  env = NULL,
  quoted = FALSE,
  priority = 0L,
  domain = NULL,
  ...,
  error_wrapper = c("none", "notification", "alert"),
  watch_data = getOption("ravedash.auto_watch_data", FALSE)
)
}
\arguments{
\item{x, env, quoted, priority, domain, ...}{passed to \code{\link[shiny]{observe}}}

\item{error_wrapper}{handler when error is encountered, choices are
\code{'none'}, \code{'notification'} (see \code{\link{error_notification}}),
or \code{'alert'} (see \code{\link{error_alert}})}

\item{watch_data}{whether to invalidate only when
\code{\link{watch_data_loaded}} is \code{TRUE}}
}
\value{
'shiny' observer instance
}
\description{
Safely wrap expression \code{x} such that shiny application does
no hang when when the expression raises error.
}
\examples{

values <- shiny::reactiveValues(A=1)

obsB <- safe_observe({
  print(values$A + 1)
})

}
