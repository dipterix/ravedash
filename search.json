[{"path":"https://dipterix.org/ravedash/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ravedash authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dipterix.org/ravedash/articles/start.html","id":"whats-rave-ravedash","dir":"Articles","previous_headings":"","what":"What’s RAVE & ravedash","title":"How to start a `RAVE` dashboard","text":"RAVE abbreviation “R Analysis Visualization intracranial EEG”, integrated toolbox written R statistical rigorous reproducible pipelines. official wiki-page rave wiki ravedash dashboard system RAVE following goals: Easy create manage dashboard sessions Provides module templates components incorporate pipelines system","code":""},{"path":"https://dipterix.org/ravedash/articles/start.html","id":"set-up-the-templates","dir":"Articles","previous_headings":"","what":"Set up the templates","title":"How to start a `RAVE` dashboard","text":"ravedash requires additional templates RAVE built-pipelines (released MIT license). can always start template expand . download template, simply run following one-time command:","code":"raveio::pipeline_install_github('dipterix/rave-pipelines')"},{"path":"https://dipterix.org/ravedash/articles/start.html","id":"manage-the-dashboard","dir":"Articles","previous_headings":"","what":"Manage the dashboard","title":"How to start a `RAVE` dashboard","text":"start ravedash application, need create session first. launch session session essentially folder located hard drive. folder contains copy modules currently installed well intermediate data, allowing always resume sessions left (depends module implementation). example, might take long time visually inspect hundreds electrodes one--one. ravedash session allows shutdown application without losing current configurations, resume analysis later . resume session, can use use_session session ID, simply list sessions using list_session.","code":"sess <- ravedash::new_session() sess sess$launch_session() ravedash::list_session() #> [[1]] #> RAVE session <session-220619-155630-EDT-PB0P> #>   Path: /Users/dipterix/rave_data/cache_dir/session-220619-155630-EDT-PB0P  #>   Date created: 2022-06-19 15:56:30 EDT  #>  #> Please run `x$launch_session()` to launch the session.  sess <- ravedash::use_session(\"session-220619-155630-EDT-PB0P\") sess$launch_session()"},{"path":"https://dipterix.org/ravedash/articles/start.html","id":"develop-your-own-modules","dir":"Articles","previous_headings":"","what":"Develop your own modules","title":"How to start a `RAVE` dashboard","text":"RAVE provides RStudio templates extend modules. Please contact help@rave.wiki request demo. official document development.","code":""},{"path":"https://dipterix.org/ravedash/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhengjia Wang. Author, maintainer, copyright holder.","code":""},{"path":"https://dipterix.org/ravedash/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Magnotti, JF, Wang, Z, Beauchamp, MS. RAVE: comprehensive open-source software reproducible analysis visualization intracranial EEG data. NeuroImage, 223, p.117341.","code":"@Article{,   title = {{RAVE}: Comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data},   author = {John F. Magnotti and Zhengjia Wang and Michael S. Beauchamp},   journal = {NeuroImage},   year = {2020},   volume = {223},   pages = {117341},   doi = {10.1016/j.neuroimage.2020.117341}, }"},{"path":"https://dipterix.org/ravedash/index.html","id":"ravedash","dir":"","previous_headings":"","what":"Dashboard System for Reproducible Visualization of iEEG","title":"Dashboard System for Reproducible Visualization of iEEG","text":"ravedash part RAVE. Please install RAVE directly wiki page. install ravedash alone, simply type R command:","code":"options(repos = c(ropensci = 'https://rave-ieeg.r-universe.dev',          CRAN = 'https://cloud.r-project.org')) install.packages(\"ravedash\")"},{"path":"https://dipterix.org/ravedash/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Dashboard System for Reproducible Visualization of iEEG","text":"Please cite following paper publication use: Magnotti J.F., Wang Z., Beauchamp M.S.. RAVE: comprehensive open-source software reproducible analysis visualization intracranial EEG data. NeuroImage, 223, p.117341. (DOI)","code":""},{"path":"https://dipterix.org/ravedash/reference/card_badge.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a badge widget located at card header — card_badge","title":"Create a badge widget located at card header — card_badge","text":"Create badge widget located card header","code":""},{"path":"https://dipterix.org/ravedash/reference/card_badge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a badge widget located at card header — card_badge","text":"","code":"card_badge(text = NULL, class = NULL, ...)  card_recalculate_badge(text = \"Recalculate needed\", class = NULL, ...)  enable_recalculate_badge(text = \"Recalculate needed\", ...)  disable_recalculate_badge(text = \"Up-to-date\", ...)  set_card_badge(   id = NULL,   class = NULL,   text = NULL,   add_class = NULL,   remove_class = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dipterix.org/ravedash/reference/card_badge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a badge widget located at card header — card_badge","text":"text inner text content badge class additional 'HTML' class badge; set_card_badge, class selector badge changed ... additional 'HTML' tag attributes id badge 'HTML' ID changed, enclosed session namespace session$ns(id) automatically. add_class, remove_class add remove class session shiny session","code":""},{"path":"https://dipterix.org/ravedash/reference/card_badge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a badge widget located at card header — card_badge","text":"","code":"library(ravedash)  # UI: a Bootstrap badge with green background card_badge(\"Ready\", class = \"bg-green rave-output-status\") #> <span class=\"right badge rave-card-badge bg-green rave-output-status\">Ready<\/span>  # server server <- function(input, output, session) {    safe_observe({      # ... check if the inputs have changed      set_card_badge(       class = \"rave-output-status\",       text = \"Refresh needed\",       add_class = \"bg-yellow\",       remove_class = \"bg-green\"     )    })  }"},{"path":"https://dipterix.org/ravedash/reference/card_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Set 'URL' scheme for modules — card_url","title":"Set 'URL' scheme for modules — card_url","text":"Automatically generates href input_card output_card","code":""},{"path":"https://dipterix.org/ravedash/reference/card_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set 'URL' scheme for modules — card_url","text":"","code":"set_card_url_scheme(module_id, root, sep = \"/\")  card_href(title, type = \"input\", module_id = NULL)"},{"path":"https://dipterix.org/ravedash/reference/card_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set 'URL' scheme for modules — card_url","text":"module_id module ID root 'URL' default route sep separation title title string used generate 'URL' type type card; choices 'input' 'output'","code":""},{"path":"https://dipterix.org/ravedash/reference/card_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set 'URL' scheme for modules — card_url","text":"hyper reference suggested card 'URL'","code":""},{"path":"https://dipterix.org/ravedash/reference/card_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set 'URL' scheme for modules — card_url","text":"","code":"set_card_url_scheme(   module_id = \"power_explorer\",   root = \"https://openwetware.org/wiki/RAVE:ravebuiltins\",   sep = \":\") #> [1] \"https://openwetware.org/wiki/RAVE:ravebuiltins:power_explorer:<card type>_<Placeholder for card title>\"  card_href(\"Set Electrodes\", type = \"input\", module_id = \"power_explorer\") #> [1] \"https://openwetware.org/wiki/RAVE:ravebuiltins:power_explorer:input_setelectrodes\""},{"path":"https://dipterix.org/ravedash/reference/debug_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Debug 'RAVE' modules interactively in local project folder — debug_modules","title":"Debug 'RAVE' modules interactively in local project folder — debug_modules","text":"Debug 'RAVE' modules interactively local project folder","code":""},{"path":"https://dipterix.org/ravedash/reference/debug_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debug 'RAVE' modules interactively in local project folder — debug_modules","text":"","code":"debug_modules(   module_root = rstudioapi::getActiveProject(),   host = \"127.0.0.1\",   port = 17283,   jupyter = FALSE,   ... )"},{"path":"https://dipterix.org/ravedash/reference/debug_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debug 'RAVE' modules interactively in local project folder — debug_modules","text":"module_root root modules, usually project folder created 'shidashi' template host, port host port application jupyter whether launch 'Jupyter' server; default false ... passed render","code":""},{"path":"https://dipterix.org/ravedash/reference/debug_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debug 'RAVE' modules interactively in local project folder — debug_modules","text":"'RStudio' job ID","code":""},{"path":"https://dipterix.org/ravedash/reference/get_active_module_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get current active module information, internally used — get_active_module_info","title":"Get current active module information, internally used — get_active_module_info","text":"Get current active module information, internally used","code":""},{"path":"https://dipterix.org/ravedash/reference/get_active_module_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get current active module information, internally used — get_active_module_info","text":"","code":"get_active_module_info(session = shiny::getDefaultReactiveDomain())  get_active_pipeline(session = shiny::getDefaultReactiveDomain())"},{"path":"https://dipterix.org/ravedash/reference/get_active_module_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get current active module information, internally used — get_active_module_info","text":"session shiny reactive domain, default current domain","code":""},{"path":"https://dipterix.org/ravedash/reference/get_active_module_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get current active module information, internally used — get_active_module_info","text":"named list, including module ID, module label, internal 'rave_id'.","code":""},{"path":"https://dipterix.org/ravedash/reference/group_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Group input elements into a box with title — group_box","title":"Group input elements into a box with title — group_box","text":"works template framework provided 'shidashi' package, see use_template","code":""},{"path":"https://dipterix.org/ravedash/reference/group_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group input elements into a box with title — group_box","text":"","code":"group_box(title, ..., class = NULL)  flex_group_box(title, ..., class = NULL, wrap = \"wrap\", direction = \"row\")"},{"path":"https://dipterix.org/ravedash/reference/group_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group input elements into a box with title — group_box","text":"title box title ... elements included passed methods class additional class box wrap, direction see flex_container","code":""},{"path":"https://dipterix.org/ravedash/reference/group_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group input elements into a box with title — group_box","text":"'HTML' tag","code":""},{"path":"https://dipterix.org/ravedash/reference/group_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group input elements into a box with title — group_box","text":"","code":"library(shiny) library(shidashi) library(ravedash)  group_box(   title = \"Analysis Group A\",   selectInput(\"a\", \"Condition\", choices = c(\"A\", \"B\")),   sliderInput(\"b\", \"Time range\", min = 0, max = 1, value = c(0,1)) ) #> <div class=\"group-input-box\" title=\"Analysis Group A\"> #>   <div class=\"form-group shiny-input-container\"> #>     <label class=\"control-label\" id=\"a-label\" for=\"a\">Condition<\/label> #>     <div> #>       <select id=\"a\" class=\"shiny-input-select\"><option value=\"A\" selected>A<\/option> #> <option value=\"B\">B<\/option><\/select> #>       <script type=\"application/json\" data-for=\"a\" data-nonempty=\"\">{\"plugins\":[\"selectize-plugin-a11y\"]}<\/script> #>     <\/div> #>   <\/div> #>   <div class=\"form-group shiny-input-container\"> #>     <label class=\"control-label\" id=\"b-label\" for=\"b\">Time range<\/label> #>     <input class=\"js-range-slider\" id=\"b\" data-skin=\"shiny\" data-type=\"double\" data-min=\"0\" data-max=\"1\" data-from=\"0\" data-to=\"1\" data-step=\"0.01\" data-grid=\"true\" data-grid-num=\"10\" data-grid-snap=\"false\" data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" data-drag-interval=\"true\" data-data-type=\"number\"/> #>   <\/div> #> <\/div>  flex_group_box(   title = \"Project and Subject\",   flex_item( \"Some input 1\" ),   flex_item( \"Some input 2\" ),   flex_break(),   flex_item( \"Some input in new line\" ) ) #> <div style=\"flex-direction:row; flex-wrap:wrap; justify-content:flex-start; align-content:stretch; align-items:stretch; display:flex\" class=\"group-input-box\" title=\"Project and Subject\"> #>   <div style=\"flex:1\" class=\"fill-width padding-5\">Some input 1<\/div> #>   <div style=\"flex:1\" class=\"fill-width padding-5\">Some input 2<\/div> #>   <div class=\"flex-break\"><\/div> #>   <div style=\"flex:1\" class=\"fill-width padding-5\">Some input in new line<\/div> #> <\/div>"},{"path":"https://dipterix.org/ravedash/reference/logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Logger system used by 'RAVE' — logger","title":"Logger system used by 'RAVE' — logger","text":"Keep track messages printed modules","code":""},{"path":"https://dipterix.org/ravedash/reference/logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger system used by 'RAVE' — logger","text":"","code":"logger(   ...,   level = c(\"info\", \"warning\", \"error\", \"fatal\", \"debug\", \"trace\"),   calc_delta = \"auto\",   .envir = parent.frame(),   .sep = \"\",   use_glue = FALSE,   reset_timer = FALSE )  set_logger_path(root_path, max_bytes, max_files)  logger_threshold(   level = c(\"info\", \"warning\", \"error\", \"fatal\", \"debug\", \"trace\"),   module_id,   type = c(\"console\", \"file\", \"both\") )  logger_error_condition(cond, level = \"error\")  error_notification(   cond,   title = \"Error found!\",   type = \"danger\",   class = \"error_notif\",   delay = 30000,   autohide = TRUE,   collapse = \"\\n\",   prefix = paste(\"Found the following error\",     \"(details have been printed in the console):\"),   session = shiny::getDefaultReactiveDomain() )  error_alert(   cond,   title = \"Error found!\",   type = \"error\",   danger_mode = TRUE,   auto_close = FALSE,   prefix = paste(\"Found the following error\",     \"(details have been printed in the console):\"),   buttons = \"Confirm\",   session = shiny::getDefaultReactiveDomain() )  with_error_notification(expr, envir = parent.frame(), quoted = FALSE, ...)  with_error_alert(expr, envir = parent.frame(), quoted = FALSE, ...)"},{"path":"https://dipterix.org/ravedash/reference/logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger system used by 'RAVE' — logger","text":"..., .envir, .sep passed glue, use_glue true level level message, choices 'info' (default), 'warning', 'error', 'fatal', 'debug', 'trace' calc_delta whether calculate time difference current message previous message; default 'auto', prints time difference level 'debug'. behavior can changed altering calc_delta logical TRUE enable FALSE disable. use_glue whether use glue combine ...; default false reset_timer whether reset timer used calc_delta root_path root directory want log messages saved hard disks; root_path NULL, \"\", nullfile, logger path unset. max_bytes maximum file size logger partitions max_files maximum number partition files hold log; old files deleted. module_id 'RAVE' module identification string, name-space; default 'ravedash' type type logging set; default 'console', file log enabled set_logger_path, type 'file' ''. Default log level 'info' console 'debug' file. cond condition log class, title, delay, autohide passed show_notification collapse, danger_mode, auto_close, buttons passed shiny_alert2 show_notification prefix additional messages display notification alert session shiny session expr expression evaluate envir environment evaluate expr quoted whether expr quoted; default false","code":""},{"path":"https://dipterix.org/ravedash/reference/logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logger system used by 'RAVE' — logger","text":"message without time-stamps","code":""},{"path":"https://dipterix.org/ravedash/reference/logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger system used by 'RAVE' — logger","text":"","code":"logger(\"This is a message\")  a <- 1 logger(\"A message with glue: a={a}\")  logger(\"A message without glue: a={a}\", use_glue = FALSE)   logger(\"Message A\", calc_delta = TRUE, reset_timer = TRUE) logger(\"Seconds before logging another message\", calc_delta = TRUE)   # by default, debug and trace messages won't be displayed logger('debug message', level = 'debug')  # adjust logger level, make sure `module_id` is a valid RAVE module ID logger_threshold('debug', module_id = NULL)  # Debug message will display logger('debug message', level = 'debug')  # Trace message will not display as it's lower than debug level logger('trace message', level = 'trace')"},{"path":"https://dipterix.org/ravedash/reference/module_server_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Default module server function — module_server_common","title":"Default module server function — module_server_common","text":"Common shiny server function enable modules requires data loader panel.","code":""},{"path":"https://dipterix.org/ravedash/reference/module_server_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default module server function — module_server_common","text":"","code":"module_server_common(   module_id,   check_data_loaded,   ...,   session = shiny::getDefaultReactiveDomain(),   parse_env = NULL )"},{"path":"https://dipterix.org/ravedash/reference/module_server_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default module server function — module_server_common","text":"module_id 'RAVE' module ID check_data_loaded function takes zero one argument must return either TRUE data loaded FALSE loader needs open load data. ... ignored session shiny session parse_env environment used parse module","code":""},{"path":"https://dipterix.org/ravedash/reference/module_server_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default module server function — module_server_common","text":"list server utility functions; see 'Examples' .","code":""},{"path":"https://dipterix.org/ravedash/reference/module_server_common.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default module server function — module_server_common","text":"","code":"# Debug in non-reactive session: create fake session fake_session <- shiny::MockShinySession$new()  # register common-server function module_server_common(module_id = \"mock-session\",                      session = fake_session) server_tools <- get_default_handlers(fake_session)  # Print each function to see the usage  server_tools$auto_recalculate #> Function to turn auto-recalculation on and off. Usage: #>  #> # Obtain the server utility functions #> server_tools <- get_default_handlers() #>  #> server_tools$auto_recalculate(TRUE)    # Turn on forever #> server_tools$auto_recalculate(FALSE)   # Turn off forever #> server_tools$auto_recalculate(1)       # Turn on once  server_tools$run_analysis_onchange #> Function to set input IDs to watch. These inputs will trigger auto re-calculate. Usage: #>  #> # Obtain the server utility functions #> server_tools <- get_default_handlers() #>  #> server_tools$run_analysis_onchange(c(\"inputId_1\", \"inputId_2\", ...))  server_tools$run_analysis_flag #> Flag to run analysis pipeline. Usage: #>  #> # Obtain the server utility functions #> server_tools <- get_default_handlers() #>  #> shiny::bindEvent( #>   shiny::observe({ #>     <Run your algorithms, e.g. `raveio::pipeline_run(...)> #>   }), #>   server_tools$run_analysis_flag(), #>   ignoreNULL = TRUE, ignoreInit = TRUE #> )  server_tools$module_is_active #> Shiny reactive to tell if the module is active or hidden. Usage: #>  #> # Obtain the server utility functions #> server_tools <- get_default_handlers() #>  #> server_tools$module_is_active()                   # current module #> server_tools$module_is_active(\"another_module\")   # whether another module is active  server_tools$simplify_view #> Show, hide, or toggle display of elements with `rave-optional` HTML class. Usage: #>  #> # Obtain the server utility functions #> server_tools <- get_default_handlers() #>  #> server_tools$simplify_view()       # Toggle optional view #> server_tools$simplify_view('yes')  # Show optional view #> server_tools$simplify_view('no')   # Hide optional view  # 'RAVE' module server function server <- function(input, output, session, ...){    pipeline_path <- \"PATH to module pipeline\"    module_server_common(     module_id = session$ns(NULL),     check_data_loaded = function(first_time){        re <- tryCatch({         # Try to read data from pipeline results         repo <- raveio::pipeline_read(           'repository',           pipe_dir = pipeline_path         )          # Fire event to update footer message         ravedash::fire_rave_event('loader_message',                                   \"Data loaded\")          # Return TRUE indicating data has been loaded         TRUE       }, error = function(e){          # Fire event to remove footer message         ravedash::fire_rave_event('loader_message', NULL)          # Return FALSE indicating no data has been found         FALSE       })     }, session = session   )  }"},{"path":"https://dipterix.org/ravedash/reference/new_rave_shiny_component_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a container for preset components — new_rave_shiny_component_container","title":"Creates a container for preset components — new_rave_shiny_component_container","text":"Creates container preset components","code":""},{"path":"https://dipterix.org/ravedash/reference/new_rave_shiny_component_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a container for preset components — new_rave_shiny_component_container","text":"","code":"new_rave_shiny_component_container(   module_id,   pipeline_name,   pipeline_path = raveio::pipeline_find(pipeline_name),   settings_file = \"settings.yaml\" )"},{"path":"https://dipterix.org/ravedash/reference/new_rave_shiny_component_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a container for preset components — new_rave_shiny_component_container","text":"module_id 'RAVE' module ID pipeline_name name pipeline run pipeline_path path pipeline settings_file settings file pipeline, usually stores pipeline input information; default \"settings.yaml\"","code":""},{"path":"https://dipterix.org/ravedash/reference/new_rave_shiny_component_container.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a container for preset components — new_rave_shiny_component_container","text":"'RAVEShinyComponentContainer' instance","code":""},{"path":"https://dipterix.org/ravedash/reference/new_rave_shiny_component_container.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a container for preset components — new_rave_shiny_component_container","text":"","code":"f <- tempfile() dir.create(f, showWarnings = FALSE, recursive = TRUE) file.create(file.path(f, \"settings.yaml\")) #> [1] TRUE  container <- new_rave_shiny_component_container(   module_id = \"module_power_phase_coherence\",   pipeline_name = \"power_phase_coherence_pipeline\",   pipeline_path = f )  loader_project <- presets_loader_project() loader_subject <- presets_loader_subject()  container$add_components(   loader_project, loader_subject )"},{"path":"https://dipterix.org/ravedash/reference/output_gadget.html","id":null,"dir":"Reference","previous_headings":"","what":"'RAVE' dashboard output gadgets — output_gadget","title":"'RAVE' dashboard output gadgets — output_gadget","text":"'RAVE' dashboard output gadgets","code":""},{"path":"https://dipterix.org/ravedash/reference/output_gadget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'RAVE' dashboard output gadgets — output_gadget","text":"","code":"output_gadget(   outputId,   icon = NULL,   type = c(\"standalone\", \"download\", \"download2\", \"actionbutton\", \"custom\"),   class = NULL,   inputId = NULL,   ... )  output_gadget_container(   expr,   gadgets = c(\"standalone\", \"download2\"),   quoted = FALSE,   env = parent.frame(),   outputId = NULL,   class = NULL,   container = NULL,   wrapper = TRUE )"},{"path":"https://dipterix.org/ravedash/reference/output_gadget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'RAVE' dashboard output gadgets — output_gadget","text":"outputId output ID root scope shiny session icon gadget icon type, gadgets gadget type(s), currently supported: 'standalone', 'download', 'actionbutton' class additional class gadget container inputId input ID, automatically assigned internally ... ignored expr shiny output call expression, example, shiny::plotOutput({...}) quoted whether expr quoted; default false env environment expr evaluated container optional container gadgets outputs; ignored wrapper false wrapper whether wrap gadgets output within 'HTML' container","code":""},{"path":"https://dipterix.org/ravedash/reference/plotOutput2.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny plot output with minimum height and additional classes — plotOutput2","title":"Shiny plot output with minimum height and additional classes — plotOutput2","text":"Shiny plot output minimum height additional classes","code":""},{"path":"https://dipterix.org/ravedash/reference/plotOutput2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny plot output with minimum height and additional classes — plotOutput2","text":"","code":"plotOutput2(   outputId,   class = NULL,   width = \"100%\",   height = \"100%\",   min_height = \"400px\",   ... )"},{"path":"https://dipterix.org/ravedash/reference/plotOutput2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny plot output with minimum height and additional classes — plotOutput2","text":"outputId, width, height, ... passed plotOutput class additional 'HTML' class output wrapper min_height minimum height image; default 400 pixels","code":""},{"path":"https://dipterix.org/ravedash/reference/plotOutput2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny plot output with minimum height and additional classes — plotOutput2","text":"plot output element can included panel.","code":""},{"path":"https://dipterix.org/ravedash/reference/plotOutput2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny plot output with minimum height and additional classes — plotOutput2","text":"","code":"plotOutput2(\"plot\", class = \"rounded overflow-hidden\",             min_height = 300) #> <div class=\"shiny-plot-output rounded overflow-hidden html-fill-item\" id=\"plot\" style=\"width:100%;height:100%;;min-height:300px\"><\/div>"},{"path":"https://dipterix.org/ravedash/reference/random-text.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly choose a text from a list of strings — random-text","title":"Randomly choose a text from a list of strings — random-text","text":"Randomly choose text list strings","code":""},{"path":"https://dipterix.org/ravedash/reference/random-text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly choose a text from a list of strings — random-text","text":"","code":"be_patient_text(candidates)  finished_text(candidates)"},{"path":"https://dipterix.org/ravedash/reference/random-text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly choose a text from a list of strings — random-text","text":"candidates character vectors, list candidates","code":""},{"path":"https://dipterix.org/ravedash/reference/random-text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly choose a text from a list of strings — random-text","text":"be_patient_text returns text asking users patient; finished_text returns text indicating task finished.","code":""},{"path":"https://dipterix.org/ravedash/reference/random-text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly choose a text from a list of strings — random-text","text":"","code":"be_patient_text() #> [1] \"Please be patient, running in progress...\"  finished_text() #> [1] \"Yay, finished!\""},{"path":"https://dipterix.org/ravedash/reference/rave-input-output-card.html","id":null,"dir":"Reference","previous_headings":"","what":"Input and output card (front-end element) — rave-input-output-card","title":"Input and output card (front-end element) — rave-input-output-card","text":"Input output card (front-end element)","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-input-output-card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input and output card (front-end element) — rave-input-output-card","text":"","code":"input_card(   title,   ...,   class = \"\",   class_header = \"shidashi-anchor\",   class_body = \"padding-10\",   class_foot = \"padding-10\",   href = \"auto\",   tools = NULL,   footer = NULL,   append_tools = TRUE,   toggle_advanced = FALSE,   module_id = get0(\"module_id\", ifnotfound = NULL, envir = parent.frame()) )  output_card(   title,   ...,   class = \"\",   class_body = \"padding-10\",   class_foot = \"padding-10\",   href = \"auto\",   tools = NULL,   append_tools = TRUE,   module_id = get0(\"module_id\", ifnotfound = NULL, envir = parent.frame()) )  output_cardset(   title,   ...,   class = \"\",   class_body = \"no-padding\",   class_foot = \"padding-10\",   href = \"auto\",   tools = NULL,   append_tools = TRUE,   module_id = get0(\"module_id\", ifnotfound = NULL, envir = parent.frame()) )"},{"path":"https://dipterix.org/ravedash/reference/rave-input-output-card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input and output card (front-end element) — rave-input-output-card","text":"title title card ... additional elements included card, see card class 'HTML' class card class_header 'HTML' class card header; default 'shidashi-anchor', generate shortcuts page footers class_body 'HTML' class card body; default \"padding-10\", '10px' direction class_foot 'HTML' class card footer; default \"padding-10\", '10px' direction href hyper reference link card tools list additional card tools, see card_tool footer footer elements append_tools whether append tools default list; default true toggle_advanced whether show links footer toggle elements 'HTML' class 'rave-optional' module_id 'RAVE' module ID","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-input-output-card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Input and output card (front-end element) — rave-input-output-card","text":"'HTML' tags","code":""},{"path":[]},{"path":"https://dipterix.org/ravedash/reference/rave-input-output-card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Input and output card (front-end element) — rave-input-output-card","text":"","code":"input_card(title = \"Condition selector\",            \"Please select experimental conditions:\",            shiny::selectInput(              inputId = \"condition\", label = \"Condition\",              choices = c(\"Audio\", \"Visual\")            )) #> <div class=\"card card-single ravedash-input-card \" data-title=\"Condition selector\"> #>   <div class=\"card-header shidashi-anchor\" style=\"\"> #>     <h3 class=\"card-title\">Condition selector<\/h3> #>     <!-- Buttons, labels, and many other things can be placed here! --> #>     <div class=\"card-tools\"> #>   <a type=\"button\" href=\"https://openwetware.org/wiki/RAVE:&lt;placeholder for module ID&gt;:input_conditionselector\" target=\"_blank\" class=\"btn btn-tool\" data-card-widget=\"link\"> #>     <i class=\"far fa-circle-question fas\" role=\"presentation\" aria-label=\"circle-question icon\" verify_fa=\"FALSE\"><\/i> #>   <\/a> #>   <a type=\"button\" href=\"#\" target=\"_self\" class=\"btn btn-tool\" data-card-widget=\"collapse\"> #>     <i class=\"fas fa-minus\" role=\"presentation\" aria-label=\"minus icon\"><\/i> #>   <\/a> #> <\/div> #>   <\/div> #>   <div class=\"card-body fill-width fill-height padding-10\" style=\";\"> #>     Please select experimental conditions: #> <div class=\"form-group shiny-input-container\"> #>   <label class=\"control-label\" id=\"condition-label\" for=\"condition\">Condition<\/label> #>   <div> #>     <select id=\"condition\" class=\"shiny-input-select\"><option value=\"Audio\" selected>Audio<\/option> #> <option value=\"Visual\">Visual<\/option><\/select> #>     <script type=\"application/json\" data-for=\"condition\" data-nonempty=\"\">{\"plugins\":[\"selectize-plugin-a11y\"]}<\/script> #>   <\/div> #> <\/div> #>   <\/div> #>    #> <\/div> #>"},{"path":"https://dipterix.org/ravedash/reference/rave-runtime-events.html","id":null,"dir":"Reference","previous_headings":"","what":"'RAVE' run-time events — rave-runtime-events","title":"'RAVE' run-time events — rave-runtime-events","text":"set preset behaviors used 'RAVE' modules","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-runtime-events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'RAVE' run-time events — rave-runtime-events","text":"","code":"register_rave_session(   session = shiny::getDefaultReactiveDomain(),   .rave_id = NULL )  get_default_handlers(session = shiny::getDefaultReactiveDomain())  fire_rave_event(   key,   value,   global = FALSE,   force = FALSE,   session = shiny::getDefaultReactiveDomain(),   .internal_ok = FALSE )  get_session_by_rave_id(rave_id)  get_rave_event(key, session = shiny::getDefaultReactiveDomain())  open_loader(session = shiny::getDefaultReactiveDomain())  close_loader(session = shiny::getDefaultReactiveDomain())  watch_loader_opened(session = shiny::getDefaultReactiveDomain())  watch_data_loaded(session = shiny::getDefaultReactiveDomain())  current_shiny_theme(default, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dipterix.org/ravedash/reference/rave-runtime-events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'RAVE' run-time events — rave-runtime-events","text":"session shiny session, usually automatically determined key event key fire monitor value event value global whether notify sessions (experimental recommended) force whether force firing event even value changed .internal_ok internally used rave_id, .rave_id internally used store unique session identification key default default value found","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-runtime-events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'RAVE' run-time events — rave-runtime-events","text":"See 'Details'","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-runtime-events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'RAVE' run-time events — rave-runtime-events","text":"goal event functions  simplify dashboard logic without understanding details passing global variables around. Everything starts register_rave_session. function registers unique identification session, adds bunch registry monitor changes themes, built-, custom events. called module_server_common, register_rave_session already called. register_rave_session make initial registries, must called, returns list registries fire_rave_event send signals make changes event; returns nothing get_rave_event watch get event values; must run shiny reactive context open_loader fire event special key 'open_loader' open data-loading panel; returns nothing close_loader reset event special key 'open_loader' close data-loading panel possible; returns nothing watch_loader_opened watch shiny reactive context whether loader opened; returns logical value, raise errors reactive context missing watch_data_loaded watch special event key 'data_loaded'; returns logical value whether new data loaded, raise errors reactive context missing current_shiny_theme watch returns list theme parameters, example, light dark theme","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-runtime-events.html","id":"built-in-events","dir":"Reference","previous_headings":"","what":"Built-in Events","title":"'RAVE' run-time events — rave-runtime-events","text":"following event keys built-. Please fire using fire_rave_event 'RAVE' application might crash 'simplify_toggle' toggle visibility 'HTML' elements class 'rave-option' 'run_analysis' notifies module run pipeline 'save_pipeline', 'load_pipeline' notifies module save load pipeline 'data_loaded' notifies module new data loaded 'open_loader', 'toggle_loader' notifies internal server code show hide data loading panel 'active_module' internally used store current active module information","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-runtime-events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'RAVE' run-time events — rave-runtime-events","text":"","code":"library(shiny) library(ravedash)  ui <- fluidPage(   actionButton(\"btn\", \"Fire event\"),   actionButton(\"btn2\", \"Toggle loader\") )  server <- function(input, output, session) {   # Create event registries   register_rave_session()    shiny::bindEvent(     shiny::observe({       fire_rave_event(\"my_event_key\", Sys.time())     }),     input$btn,     ignoreInit = TRUE,     ignoreNULL = TRUE   )   shiny::bindEvent(     shiny::observe({       cat(\"An event fired with value:\", get_rave_event(\"my_event_key\"), \"\\n\")     }),     get_rave_event(\"my_event_key\"),     ignoreNULL = TRUE   )    shiny::bindEvent(     shiny::observe({       if(watch_loader_opened()){         close_loader()       } else {         open_loader()       }     }),     input$btn2,     ignoreInit = TRUE,     ignoreNULL = TRUE   )    shiny::bindEvent(     shiny::observe({       cat(\"Loader is\", ifelse(watch_loader_opened(), \"opened\", \"closed\"), \"\\n\")     }),     watch_loader_opened(),     ignoreNULL = TRUE   )  }  if(interactive()){   shinyApp(ui, server) }"},{"path":"https://dipterix.org/ravedash/reference/rave-session.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, register, list, and remove 'RAVE' sessions — rave-session","title":"Create, register, list, and remove 'RAVE' sessions — rave-session","text":"Create, register, list, remove 'RAVE' sessions","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, register, list, and remove 'RAVE' sessions — rave-session","text":"","code":"new_session(update = FALSE, app_root = NULL)  use_session(x, ...)  launch_session(   x,   host = \"127.0.0.1\",   port = NULL,   modules = NULL,   dry_run = FALSE,   options = list(jupyter = TRUE, jupyter_port = NULL, as_job = TRUE, launch_browser =     TRUE, single_session = FALSE, page_title = NULL, sidebar_open = TRUE) )  session_getopt(keys, default = NA, namespace = \"default\")  session_setopt(..., .list = NULL, namespace = \"default\")  remove_session(x)  remove_all_sessions()  list_session(path = session_root(), order = c(\"none\", \"ascend\", \"descend\"))  start_session(   session,   new = NA,   modules = NULL,   page_title = NULL,   sidebar_open = TRUE,   host = \"127.0.0.1\",   port = NULL,   jupyter = NA,   jupyter_port = NULL,   as_job = TRUE,   launch_browser = TRUE,   single_session = FALSE,   app_root = NULL,   dry_run = FALSE )  shutdown_session(   returnValue = invisible(NULL),   jupyter = TRUE,   session = shiny::getDefaultReactiveDomain() )  session_log(x, max_lines = 200, modules = NULL)"},{"path":"https://dipterix.org/ravedash/reference/rave-session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, register, list, and remove 'RAVE' sessions — rave-session","text":"update logical, whether update latest 'RAVE' template ..., .list named list key-value pairs session options. keys must characters, values must simple data types (numeric vectors, characters) host host 'IP' address, default 'localhost' port port listen modules selected module ID launch; used show subset modules; default NULL (select modules); hidden modules always selected dry_run whether dry-run (launch) 'RAVE' session options additional options, including jupyter, jupyter_port, as_job, launch_browser keys vector characters, one keys values obtained default default value key missing namespace namespace option; default 'default' path, app_root root path store sessions; default \"tensor_temp_path\" raveio_getopt order whether order session date created; choices 'none' (default), 'ascend', 'descend' session, x session identification string, session object; use list_session list existing sessions new whether create new session instead using recent one, default false page_title session web page title logo text; can length either one (page title logo text ); length two, page title first element logo text second. sidebar_open whether open side-bar default; default TRUE one module displayed jupyter logical, whether launch 'jupyter' instances starting 'RAVE' sessions, stop 'jupyter' instances shutting . requires additional setups enable 'jupyter' lab; see 'Installation Guide Step 3' 'RAVE' wiki page. jupyter_port port used 'jupyter' lab, can set 'jupyter_port' option raveio_setopt as_job whether launch application 'RStudio' job, default true 'RStudio' detected; running without 'RStudio', option always false launch_browser whether launch browser, default true single_session whether enable single-session mode. mode, closing main frame terminate 'RAVE' run-time session, otherwise 'RAVE' instance still open background returnValue passed stopApp max_lines maximum number log entries return; default 200","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create, register, list, and remove 'RAVE' sessions — rave-session","text":"new_session returns session object character 'session_id' function 'launch_session' launch application session use_session returns session object, new_session condition corresponding session exists, raise error session missing list_session returns list existing session objects session root remove_session returns logical whether corresponding session found removed","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, register, list, and remove 'RAVE' sessions — rave-session","text":"","code":"if(interactive()){    sess <- new_session()   sess$launch_session()    all_sessions <- list_session()   print(all_sessions)    # Use existing session   session_id <- all_sessions[[1]]$session_id   sess <- use_session(session_id)   sess$launch_session()    # Remove session   remove_session(session_id)   list_session() }"},{"path":"https://dipterix.org/ravedash/reference/rave-ui-preset.html","id":null,"dir":"Reference","previous_headings":"","what":"Preset reusable front-end components for 'RAVE' modules — rave-ui-preset","title":"Preset reusable front-end components for 'RAVE' modules — rave-ui-preset","text":"examples use cases, please check new_rave_shiny_component_container.","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-ui-preset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preset reusable front-end components for 'RAVE' modules — rave-ui-preset","text":"","code":"presets_analysis_electrode_selector2(   id = \"electrode_text\",   varname = \"analysis_electrodes\",   label = \"Select Electrodes\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\",   pipeline_repository = \"repository\",   start_simple = FALSE,   multiple = TRUE )  presets_analysis_ranges(   id = \"analysis_ranges\",   varname = \"analysis_ranges\",   label = \"Configure Analysis\",   pipeline_repository = \"repository\",   max_components = 2 )  presets_baseline_choices(   id = \"baseline_choices\",   varname = \"baseline\",   label = \"Baseline Settings\",   pipeline_repository = \"repository\",   baseline_choices = c(\"Decibel\", \"% Change Power\", \"% Change Amplitude\",     \"z-score Power\", \"z-score Amplitude\"),   baseline_along_choices = c(\"Per frequency, trial, and electrode\", \"Across electrode\",     \"Across trial\", \"Across trial and electrode\") )  presets_condition_groups(   id = \"condition_groups\",   varname = \"condition_groups\",   label = \"Create Condition Contrast\",   pipeline_repository = \"repository\" )  presets_import_export_subject_pipeline(   id = \"im_ex_pipeline\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\",   pipeline_repository = \"repository\",   settings_entries = c(\"loaded_electrodes\", \"epoch_choice\", \"epoch_choice__trial_starts\",     \"epoch_choice__trial_ends\", \"reference_name\"),   fork_mode = c(\"exclude\", \"include\") )  presets_import_setup_blocks(   id = \"import_blocks\",   label = \"Format & session blocks\",   import_setup_id = \"import_setup\",   max_components = 5 )  presets_import_setup_channels(   id = \"import_channels\",   label = \"Channel information\",   import_setup_id = \"import_setup\",   import_blocks_id = \"import_blocks\" )  presets_import_setup_native(   id = \"import_setup\",   label = \"Select project & subject\" )  presets_loader_3dviewer(   id = \"loader_3d_viewer\",   height = \"600px\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\",   loader_reference_id = \"loader_reference_name\",   loader_electrodes_id = \"loader_electrode_text\",   gadgets = c(\"standalone\", \"download\") )  presets_loader_3dviewer2(   id = \"loader_3d_viewer\",   height = \"600px\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\",   loader_electrodes_id = \"loader_electrode_text\",   gadgets = c(\"standalone\", \"download\") )  presets_loader_electrodes(   id = \"loader_electrode_text\",   varname = \"loaded_electrodes\",   label = \"Electrodes\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\" )  presets_loader_epoch(   id = \"loader_epoch_name\",   varname = \"epoch_choice\",   label = \"Epoch and Trial Duration\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\" )  presets_loader_project(   id = \"loader_project_name\",   varname = \"project_name\",   label = \"Project\" )  presets_loader_reference(   id = \"loader_reference_name\",   varname = \"reference_name\",   label = \"Reference name\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\",   mode = c(\"default\", \"create\") )  presets_loader_subject(   id = \"loader_subject_code\",   varname = \"subject_code\",   label = \"Subject\",   loader_project_id = \"loader_project_name\",   checks = c(\"notch\", \"wavelet\"),   allow_new = FALSE )  presets_loader_subject_only(   id = \"loader_subject_code\",   varname = \"subject_code\",   label = \"Subject\",   multiple = FALSE )  presets_loader_sync_project_subject(   id = \"loader_sync_project_subject\",   label = \"Sync subject from most recently loaded\",   varname = \"loader_sync_project_subject\",   loader_project_id = \"loader_project_name\",   loader_subject_id = \"loader_subject_code\",   from_module = NULL,   project_varname = \"project_name\",   subject_varname = \"subject_code\" )"},{"path":"https://dipterix.org/ravedash/reference/rave-ui-preset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preset reusable front-end components for 'RAVE' modules — rave-ui-preset","text":"id input output ID element; ID prepended module namespace varname variable name(s) module's settings file label readable label(s) element loader_project_id ID presets_loader_project different default loader_subject_id ID presets_loader_subject different default pipeline_repository pipeline name represents 'RAVE' repository functions prepare_subject_bare, prepare_subject_with_epoch, prepare_subject_power start_simple whether start simple view hide optional inputs multiple whether allow multiple inputs max_components maximum number components compound inputs baseline_choices possible approaches calculate baseline baseline_along_choices units baseline settings_entries used importing pipelines, pipeline variable names included excluded, depending fork_mode fork_mode 'exclude' (default) 'include'; 'exclude' mode, settings_entries excluded pipeline settings; 'include' mode, settings_entries can imported. import_setup_id ID presets_import_setup_native different default import_blocks_id ID presets_import_setup_blocks different default height height element loader_reference_id ID presets_loader_reference different default loader_electrodes_id ID presets_loader_electrodes different default gadgets gadget types include; see type argument function output_gadget mode whether create new reference, simply choose existing references checks whether check subject applied 'Notch' filters 'Wavelet'; default . allow_new whether allow new subject created; ignored checks exist from_module module extract input settings project_varname, subject_varname variable names extracted settings file","code":""},{"path":"https://dipterix.org/ravedash/reference/rave-ui-preset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preset reusable front-end components for 'RAVE' modules — rave-ui-preset","text":"'RAVEShinyComponent' instance.","code":""},{"path":[]},{"path":"https://dipterix.org/ravedash/reference/ravedash_footer.html","id":null,"dir":"Reference","previous_headings":"","what":"A hovering footer at bottom-right — ravedash_footer","title":"A hovering footer at bottom-right — ravedash_footer","text":"Internally used. call explicitly","code":""},{"path":"https://dipterix.org/ravedash/reference/ravedash_footer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A hovering footer at bottom-right — ravedash_footer","text":"","code":"ravedash_footer(   module_id = NULL,   label = \"Run Analysis\",   auto_recalculation = TRUE,   message_action = \"toggle_loader\",   class = NULL,   style = NULL )"},{"path":"https://dipterix.org/ravedash/reference/ravedash_footer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A hovering footer at bottom-right — ravedash_footer","text":"module_id 'RAVE' module ID label run-analysis button label; default \"Run Analysis\" auto_recalculation whether show automatic calculation button; default true message_action message send clicking message button; default 'toggle_loader', opens loading screen class additional class footer style additional style footer","code":""},{"path":"https://dipterix.org/ravedash/reference/ravedash_footer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A hovering footer at bottom-right — ravedash_footer","text":"'HTML' tags","code":""},{"path":"https://dipterix.org/ravedash/reference/ravedash_footer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A hovering footer at bottom-right — ravedash_footer","text":"","code":"library(shiny) # dummy variables for the example data_loaded <- TRUE  # UI code ravedash_footer(\"my_module\") #> <div class=\"ravedash-back-to-top ravedash-footer\"> #>   <div class=\"btn-group dropup\" role=\"group\"> #>     <button type=\"button\" id=\"my_module-__loader_short_message__\" class=\"btn btn-default border-right-1 btn-go-top shiny-text-output rave-button\" data-toggle=\"tooltip\" title=\"Click to toggle the data loader\" rave-action=\"{&quot;type&quot;: &quot;toggle_loader&quot;}\"><\/button> #>     <button type=\"button\" class=\"btn btn-default border-right-1 border-left-1 rave-button rave-button-autorecalculate\" data-toggle=\"tooltip\" title=\"Keyboard shortcut: CTRL+Enter / Command+Return (OSX)\" rave-action=\"{&quot;type&quot;: &quot;run_analysis&quot;}\">Run Analysis<\/button> #>     <button type=\"button\" class=\"btn btn-default btn-go-top border-left-1 dropdown-toggle dropdown-toggle-split\" href=\"#\" aria-haspopup=\"false\" aria-expanded=\"false\"> #>       <span class=\"sr-only\">Dropdown-Open<\/span> #>     <\/button> #>     <div class=\"dropdown-menu dropdown-menu-right\"> #>       <h6 class=\"dropdown-header\">Controllers<\/h6> #>       <div class=\"px-3 py-1\"> #>         <a class=\"btn btn-default rave-button\" href=\"#\" rave-action=\"{&quot;type&quot;: &quot;toggle_auto_recalculation&quot;}\" data-toggle=\"tooltip\" title=\"Toggle auto re-calculation\"> #>           <i class=\"fas fa-arrows-rotate \" role=\"presentation\" aria-label=\"arrows-rotate icon\" verify_fa=\"FALSE\"><\/i> #>           <span style=\"color: #007bff\" id=\"my_module-__recalculation_message__\" class=\"shiny-text-output pointer-events-none\"><\/span> #>         <\/a> #>         <a class=\"btn btn-default shidashi-button\" href=\"#\" shidashi-action=\"{&quot;method&quot;: &quot;card&quot;, &quot;args&quot;: [{&quot;selector&quot;: &quot;.ravedash-input-card&quot;, &quot;method&quot;: &quot;expand&quot;}]}\" data-toggle=\"tooltip\" title=\"Expand all input cards\"> #>           <i class=\"fas fa-plus \" role=\"presentation\" aria-label=\"plus icon\" verify_fa=\"FALSE\"><\/i> #>         <\/a> #>         <a class=\"btn btn-default shidashi-button\" href=\"#\" shidashi-action=\"{&quot;method&quot;: &quot;card&quot;, &quot;args&quot;: [{&quot;selector&quot;: &quot;.ravedash-input-card&quot;, &quot;method&quot;: &quot;collapse&quot;}]}\" data-toggle=\"tooltip\" title=\"Collapse all input cards\"> #>           <i class=\"fas fa-minus \" role=\"presentation\" aria-label=\"minus icon\" verify_fa=\"FALSE\"><\/i> #>         <\/a> #>         <a class=\"btn btn-default rave-button\" href=\"#\" rave-action=\"{&quot;type&quot;: &quot;simplify_toggle&quot;}\" data-toggle=\"tooltip\" title=\"Show more/fewer options\"> #>           <i class=\"fab fa-simplybuilt \" role=\"presentation\" aria-label=\"simplybuilt icon\" verify_fa=\"FALSE\"><\/i> #>         <\/a> #>       <\/div> #>       <div class=\"dropdown-divider\"><\/div> #>       <h6 class=\"dropdown-header\">Quick Access<\/h6> #>     <\/div> #>   <\/div> #> <\/div>  # server code to set message server <- function(input, output, session){    module_server_common(input, output, session, function(){      # check if data has been loaded     if(data_loaded) {        # if yes, then set the footer message       fire_rave_event(\"loader_message\",                       \"my_project/subject - Epoch: Auditory\")       return(TRUE)     } else {        # No data found, unset the footer message       fire_rave_event(\"loader_message\", NULL)       return(FALSE)     }    }) }"},{"path":"https://dipterix.org/ravedash/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dipsaus %%, close_alert2, shiny_alert2 shidashi clear_notifications, show_notification","code":""},{"path":"https://dipterix.org/ravedash/reference/register_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Register output and output options — register_output","title":"Register output and output options — register_output","text":"Enable advanced output gadgets expanding output another browser window, downloading rendered data.","code":""},{"path":"https://dipterix.org/ravedash/reference/register_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register output and output options — register_output","text":"","code":"register_output_options(   outputId,   ...,   .opt = list(),   extras = list(),   session = shiny::getDefaultReactiveDomain() )  get_output_options(outputId, session = shiny::getDefaultReactiveDomain())  register_output(   render_function,   outputId,   ...,   output_opts = list(),   quoted = FALSE,   download_function = NULL,   download_fileformat =     \"{ outputId }-{ format(Sys.time(), '%b_%d_%Y_%H_%M_%S') }.{ extension }\",   output_type = c(\"image\", \"data\", \"threeBrain\", \"no-download\"),   extensions = NULL,   title = \"Download widget\",   cancel_btn = \"Cancel\",   confirm_btn = \"Download\",   session = shiny::getDefaultReactiveDomain() )  get_output(outputId, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dipterix.org/ravedash/reference/register_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register output and output options — register_output","text":"outputId output ID scope current shiny session extras extra information store session shiny session instance render_function shiny render function output_opts, .opt output options quoted whether render_function quoted; default false download_function core function writes data files; default set 'image' 'threeBrain' automatically; see 'Default' 'Examples'. download_fileformat download file format, supports 'glue' output_type type export file formats supported, options 'image' (figures, default), 'data', 'threeBrain' ('RAVE' 3D viewers), '-download' (export). extensions list file extensions descriptions; names used display modal selectors, values underlying extension read download_fileformat title, cancel_btn, confirm_btn, ... title, button labels, additional 'HTML' elements shown modal","code":""},{"path":"https://dipterix.org/ravedash/reference/register_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register output and output options — register_output","text":"Registered output output options.","code":""},{"path":"https://dipterix.org/ravedash/reference/register_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register output and output options — register_output","text":"following steps done register_output called: * Register render function shiny output output[[outputId]] * Register render information session can retrieved via get_output * Register (download_function function) download handler listen shiny event. event ID paste0(outputId, '__download2'). downloading event triggered, modal pop asking exporting format (always exists) image dimensions (output type 'image') title (output type 'threeBrain'). Users choose proper inputs, passed download_function. file extensions named list. names printable descriptions formats, values file extensions (without leading '.'). example, list(\"compressed CSV\" = \"csv\"). Users see \"compressed CSV\" format selector, download_function sees \"csv\". output type image, users asked enter image size inches; default width 7, height calculated based current image aspect ratio. like show modal, pass 'HTML' elements ... Function download_function function containing four inputs: * con: file data written * params: named list params$extension (file extension), width, height (type image), title (3D viewer) * render_expr quoted rendering expression rendering function * render_env rendering environment rendering function. Default download_function provided specified.","code":""},{"path":"https://dipterix.org/ravedash/reference/register_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register output and output options — register_output","text":"","code":"if(interactive()) {  library(shiny) library(ravedash)  # ---- Use this in RAVE --------  # UI output_gadget_container(   plotOutput(\"plot\", brush = shiny::brushOpts(\"plot__brush\")), )  # server server <- function(input, output, session) {   register_output(     renderPlot({       # ... plot it     }),     outputId = \"plot\",     output_opts = list(brush = shiny::brushOpts(\"plot__brush\"))   ) }   # ---- Low-level method ------------  rave_id <- paste(sample(c(letters, LETTERS, 0:9), 20, replace = TRUE),                  collapse = \"\")  ui <- function(req) {   query_string <- req$QUERY_STRING   if(length(query_string) != 1) {     query_string <- \"/\"   }   query_result <- httr::parse_url(query_string)    if(!identical(toupper(query_result$query$standalone), \"TRUE\")) {     # normal page     basicPage(       output_gadget_container(         plotOutput(\"plot\", brush = shiny::brushOpts(\"plot__brush\")),       )     )   } else {     # standalone viewer     uiOutput(\"viewer\")   } }  server <- function(input, output, session) {    bindEvent(     safe_observe({       query_string <- session$clientData$url_search       query_result <- httr::parse_url(query_string)        if(!identical(toupper(query_result$query$module), \"standalone_viewer\")) {         # normal page         register_rave_session(session = session, .rave_id = rave_id)         register_output(           renderPlot({             input$btn             plot(rnorm(100), pch = 16)           }),           outputId = \"plot\",           output_opts = list(brush = shiny::brushOpts(\"plot__brush\"))         )       } else {         # standalone viewer         standalone_viewer(outputId = \"plot\", rave_id = rave_id)       }     }),     session$clientData$url_search   )   }  shinyApp(ui, server, options = list(port = 8989)) }"},{"path":"https://dipterix.org/ravedash/reference/run_analysis_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Button to trigger analysis — run_analysis_button","title":"Button to trigger analysis — run_analysis_button","text":"button triggers 'run_analysis' event; see also get_rave_event","code":""},{"path":"https://dipterix.org/ravedash/reference/run_analysis_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Button to trigger analysis — run_analysis_button","text":"","code":"run_analysis_button(   label = \"Run analysis (Ctrl+Enter)\",   icon = NULL,   width = NULL,   type = \"primary\",   btn_type = c(\"button\", \"link\"),   class = \"\",   style = \"\",   ... )"},{"path":"https://dipterix.org/ravedash/reference/run_analysis_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Button to trigger analysis — run_analysis_button","text":"label label display icon icon label width, class, style, ... passed 'HTML' tag type used calculate class btn_type button style, choices 'button' 'link'","code":""},{"path":"https://dipterix.org/ravedash/reference/run_analysis_button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Button to trigger analysis — run_analysis_button","text":"'HTML' button tag","code":""},{"path":"https://dipterix.org/ravedash/reference/safe_observe.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe-wrapper of 'shiny' observe function — safe_observe","title":"Safe-wrapper of 'shiny' observe function — safe_observe","text":"Safely wrap expression x shiny application hang expression raises error.","code":""},{"path":"https://dipterix.org/ravedash/reference/safe_observe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe-wrapper of 'shiny' observe function — safe_observe","text":"","code":"safe_observe(   x,   env = NULL,   quoted = FALSE,   priority = 0L,   domain = NULL,   ...,   error_wrapper = c(\"none\", \"notification\", \"alert\") )"},{"path":"https://dipterix.org/ravedash/reference/safe_observe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe-wrapper of 'shiny' observe function — safe_observe","text":"x, env, quoted, priority, domain, ... passed observe error_wrapper handler error encountered, choices 'none', 'notification' (see error_notification), 'alert' (see error_alert)","code":""},{"path":"https://dipterix.org/ravedash/reference/safe_observe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe-wrapper of 'shiny' observe function — safe_observe","text":"'shiny' observer instance","code":""},{"path":"https://dipterix.org/ravedash/reference/safe_observe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe-wrapper of 'shiny' observe function — safe_observe","text":"","code":"values <- shiny::reactiveValues(A=1)  obsB <- safe_observe({   print(values$A + 1) })"},{"path":"https://dipterix.org/ravedash/reference/shiny_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain caching object for current run-time shiny session — shiny_cache","title":"Obtain caching object for current run-time shiny session — shiny_cache","text":"Cache small objects inputs configurations","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain caching object for current run-time shiny session — shiny_cache","text":"","code":"shiny_cache(namespace, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dipterix.org/ravedash/reference/shiny_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain caching object for current run-time shiny session — shiny_cache","text":"namespace characters, usually module ID session shiny interactive context domain","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain caching object for current run-time shiny session — shiny_cache","text":"caching object. caching object identical within context namespace.","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_check_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check shiny inputs and modify if validation fails — shiny_check_input","title":"Check shiny inputs and modify if validation fails — shiny_check_input","text":"Check shiny inputs modify validation fails","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_check_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check shiny inputs and modify if validation fails — shiny_check_input","text":"","code":"shiny_check_input(   inputId,   check = NULL,   on_check_fails,   ...,   quoted = FALSE,   env = parent.frame(),   logger_level = c(\"trace\", \"none\", \"debug\", \"info\", \"warning\", \"error\"),   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dipterix.org/ravedash/reference/shiny_check_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check shiny inputs and modify if validation fails — shiny_check_input","text":"inputId character, input ID check either function takes input value character checkmate function; check character, function look check_* functions checkmate package on_check_fails value substitute check fails, input value result on_check_fails. argument can missing; missing, input value altered ... passed check function quoted whether on_check_fails quoted env environment evaluate on_check_fails logger_level log level validation fails session shiny session; default current session","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_check_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check shiny inputs and modify if validation fails — shiny_check_input","text":"shiny observe instance","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_check_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check shiny inputs and modify if validation fails — shiny_check_input","text":"","code":"if(interactive()) {  library(ravedash) shiny::shinyApp(   ui = shiny::basicPage(     shiny::textInput(\"id1\", \"Enter a text\"),     shiny::textOutput(\"id2\")   ),   server = function(input, output, session) {     # input$id1 must have at least 1 character     # the check uses `checkmate::check_character`     shiny_check_input(       \"id1\",       check = \"character\",       min.chars = 1,       on_check_fails = \"altered text\"     )      output$id2 <- shiny::renderText({       print(input$id1)       sprintf(\"The final value is: %s\", input$id1)     })   } )  }"},{"path":"https://dipterix.org/ravedash/reference/shiny_icons.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny icons — shiny_icons","title":"Shiny icons — shiny_icons","text":"Shiny icons","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_icons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny icons — shiny_icons","text":"","code":"shiny_icons"},{"path":"https://dipterix.org/ravedash/reference/shiny_icons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Shiny icons — shiny_icons","text":"object class ravedash_shiny_icons length 0.","code":""},{"path":"https://dipterix.org/ravedash/reference/shiny_icons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny icons — shiny_icons","text":"goal create list keep 'shiny' icons (essentially 'font-awesome' icons) --date.","code":""},{"path":"https://dipterix.org/ravedash/reference/simple_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple input-output layout — simple_layout","title":"Simple input-output layout — simple_layout","text":"Provides simple layout, inputs left, outputs right. useful 'shidashi' framework.","code":""},{"path":"https://dipterix.org/ravedash/reference/simple_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple input-output layout — simple_layout","text":"","code":"simple_layout(   input_ui,   output_ui,   input_width = 4L,   container_fixed = FALSE,   container_style = NULL,   scroll = FALSE )"},{"path":"https://dipterix.org/ravedash/reference/simple_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple input-output layout — simple_layout","text":"input_ui 'HTML' tags inputs output_ui 'HTML' tags outputs input_width width inputs, must integer 1 11 container_fixed whether maximum width container fixed; default container_style additional 'CSS' style container scroll whether stretch container full-heights scroll input output separately.","code":""},{"path":"https://dipterix.org/ravedash/reference/simple_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple input-output layout — simple_layout","text":"'HTML' tags","code":""},{"path":"https://dipterix.org/ravedash/reference/simple_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple input-output layout — simple_layout","text":"","code":"library(shiny) library(ravedash)  simple_layout(   input_ui = list(     ravedash::input_card(       title = \"Data Selection\",       \"Add inputs here\"     )   ),   output_ui = list(     ravedash::output_card(       title = \"Result A\",       \"Add outputs here\"     )   ) ) #> <div class=\"container-fluid\"> #>   <div class=\"row\"> #>     <div class=\"col-md-4\"> #>       <div class=\"row\"> #>         <div class=\"col-sm-12\"><div class=\"card card-single ravedash-input-card \" data-title=\"Data Selection\"> #>   <div class=\"card-header shidashi-anchor\" style=\"\"> #>     <h3 class=\"card-title\">Data Selection<\/h3> #>     <!-- Buttons, labels, and many other things can be placed here! --> #>     <div class=\"card-tools\"> #>             <a type=\"button\" href=\"https://openwetware.org/wiki/RAVE:&lt;placeholder for module ID&gt;:input_dataselection\" target=\"_blank\" class=\"btn btn-tool\" data-card-widget=\"link\"> #>               <i class=\"far fa-circle-question fas\" role=\"presentation\" aria-label=\"circle-question icon\" verify_fa=\"FALSE\"><\/i> #>             <\/a> #>             <a type=\"button\" href=\"#\" target=\"_self\" class=\"btn btn-tool\" data-card-widget=\"collapse\"> #>               <i class=\"fas fa-minus\" role=\"presentation\" aria-label=\"minus icon\"><\/i> #>             <\/a> #>           <\/div> #>   <\/div> #>   <div class=\"card-body fill-width fill-height padding-10\" style=\";\"> #>     Add inputs here #>   <\/div> #>    #> <\/div> #> <\/div> #>       <\/div> #>     <\/div> #>     <div class=\"col-md-8\"> #>       <div class=\"row\"> #>         <div class=\"col-sm-12\"><div class=\"card card-single ravedash-output-card \" data-title=\"Result A\"> #>   <div class=\"card-header \" style=\"\"> #>     <h3 class=\"card-title\">Result A<\/h3> #>     <!-- Buttons, labels, and many other things can be placed here! --> #>     <div class=\"card-tools\"> #>             <a type=\"button\" href=\"https://openwetware.org/wiki/RAVE:&lt;placeholder for module ID&gt;:output_resulta\" target=\"_blank\" class=\"btn btn-tool\" data-card-widget=\"link\"> #>               <i class=\"far fa-circle-question fas\" role=\"presentation\" aria-label=\"circle-question icon\" verify_fa=\"FALSE\"><\/i> #>             <\/a> #>             <a type=\"button\" href=\"#\" target=\"_self\" class=\"btn btn-tool\" data-card-widget=\"collapse\"> #>               <i class=\"fas fa-minus\" role=\"presentation\" aria-label=\"minus icon\"><\/i> #>             <\/a> #>             <a type=\"button\" href=\"#\" target=\"_self\" class=\"btn btn-tool\" data-card-widget=\"maximize\"> #>               <i class=\"fas fa-expand\" role=\"presentation\" aria-label=\"expand icon\"><\/i> #>             <\/a> #>           <\/div> #>   <\/div> #>   <div class=\"card-body fill-width fill-height padding-10\" style=\";\"> #>     Add outputs here #>   <\/div> #>    #> <\/div> #> <\/div> #>       <\/div> #>     <\/div> #>   <\/div> #> <\/div>"},{"path":"https://dipterix.org/ravedash/reference/standalone_viewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Register shiny-output options to allow display in stand-alone viewers — standalone_viewer","title":"Register shiny-output options to allow display in stand-alone viewers — standalone_viewer","text":"Save output options additional configurations can used stand-alone viewer","code":""},{"path":"https://dipterix.org/ravedash/reference/standalone_viewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register shiny-output options to allow display in stand-alone viewers — standalone_viewer","text":"","code":"standalone_viewer(   outputId,   module_session,   rave_id,   session = shiny::getDefaultReactiveDomain(),   wrapper_id = \"viewer\" )"},{"path":"https://dipterix.org/ravedash/reference/standalone_viewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register shiny-output options to allow display in stand-alone viewers — standalone_viewer","text":"outputId full shiny output ID module_session module shiny session; provided, session inferred rave_id rave_id unique identification key 'RAVE' module sessions, can obtained via get_active_module_info session shiny session object wrapper_id wrapping render ID, default \"viewer\"","code":""},{"path":"https://dipterix.org/ravedash/reference/standalone_viewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register shiny-output options to allow display in stand-alone viewers — standalone_viewer","text":"nothing","code":""},{"path":"https://dipterix.org/ravedash/reference/standalone_viewer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register shiny-output options to allow display in stand-alone viewers — standalone_viewer","text":"'RAVE' dashboard provides powerful stand-alone viewers users can display almost outputs modules interact viewers sending messages back.","code":""},{"path":"https://dipterix.org/ravedash/reference/standalone_viewer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register shiny-output options to allow display in stand-alone viewers — standalone_viewer","text":"","code":"if(interactive()) {  library(shiny) library(ravedash)  rave_id <- paste(sample(c(letters, LETTERS, 0:9), 20, replace = TRUE),                  collapse = \"\")  ui <- function(req) {   query_string <- req$QUERY_STRING   if(length(query_string) != 1) {     query_string <- \"/\"   }   query_result <- httr::parse_url(query_string)    if(!identical(toupper(query_result$query$standalone), \"TRUE\")) {     # normal page     basicPage(       actionButton(\"btn\", \"Click Me\"),       plotOutput(\"plot\")     )   } else {     # standalone viewer     uiOutput(\"viewer\")   } }  server <- function(input, output, session) {    bindEvent(     safe_observe({       query_string <- session$clientData$url_search       query_result <- httr::parse_url(query_string)        if(!identical(toupper(query_result$query$standalone), \"TRUE\")) {         # normal page         register_rave_session(session = session, .rave_id = rave_id)         output$plot <- renderPlot({           input$btn           plot(rnorm(100), pch = 16)         })       } else {         # standalone viewer         standalone_viewer(outputId = \"plot\", rave_id = rave_id)       }     }),     session$clientData$url_search   )   }  shinyApp(ui, server, options = list(port = 8989))  # Now open http://127.0.0.1:8989/?standalone=TRUE  }"},{"path":"https://dipterix.org/ravedash/reference/switch_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Drive 'RAVE' browser to switch to another module — switch_module","title":"Drive 'RAVE' browser to switch to another module — switch_module","text":"Switch another 'RAVE' module continue procedures.","code":""},{"path":"https://dipterix.org/ravedash/reference/switch_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drive 'RAVE' browser to switch to another module — switch_module","text":"","code":"switch_module(module_id, title, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dipterix.org/ravedash/reference/switch_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drive 'RAVE' browser to switch to another module — switch_module","text":"module_id module ID, see 'modules.yaml' pipeline directory title module title display session shiny session","code":""},{"path":"https://dipterix.org/ravedash/reference/switch_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drive 'RAVE' browser to switch to another module — switch_module","text":"Nothing","code":""},{"path":"https://dipterix.org/ravedash/reference/temp_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a random temporary file path for current session — temp_file","title":"Create a random temporary file path for current session — temp_file","text":"Create random temporary file path current session","code":""},{"path":"https://dipterix.org/ravedash/reference/temp_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a random temporary file path for current session — temp_file","text":"","code":"temp_file(   pattern = \"file\",   fileext = \"\",   persist = c(\"process\", \"app-session\", \"package-cache\") )  temp_dir(check = FALSE, persist = c(\"process\", \"app-session\", \"package-cache\"))"},{"path":"https://dipterix.org/ravedash/reference/temp_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a random temporary file path for current session — temp_file","text":"pattern, fileext see tempfile persist persist level, choices 'app-session', 'package-cache', 'process'; see 'Details'. 'RAVE' application session, default), 'package-cache' (package-level cache directory) check whether create temporary directory","code":""},{"path":"https://dipterix.org/ravedash/reference/temp_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a random temporary file path for current session — temp_file","text":"file directory path persist temporary data cache","code":""},{"path":"https://dipterix.org/ravedash/reference/temp_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a random temporary file path for current session — temp_file","text":"R default tempdir usually gets removed R process ends. behavior might meet needs 'RAVE' modules. example, data 'RAVE' session-based, like current last visited subject, project, state data (like bookmarks, configurations). session-based information useful launching 'RAVE' instance next time, hence removed users close R. data, subject-related, package-related last even longer. types data may cache subject power, package-generated color schemes, often irrelevant R 'RAVE' sessions, can shared across different 'RAVE' instances. default scheme persist='process'. mode, function behaves tempfile. store data 'RAVE' session-based manner, please use persist='app-session'. actual path inside 'RAVE' session folder, hence option valid 'RAVE' instance running. 'RAVE' instance running, result falls back persist='process'. persist='process', cache larger session-irrelevant data, use 'package-cache'. 'RAVE' session package cache cleared even R process ends. Users need clean data . See remove_session remove_all_sessions removing session-based folders, clear_cached_files remove package-based cache.","code":""},{"path":"https://dipterix.org/ravedash/reference/temp_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a random temporary file path for current session — temp_file","text":"","code":"temp_dir() #> [1] \"/var/folders/2f/8t5k6yr535sdw0s4glnpxrzm0000gn/T//RtmphJdcn4\" temp_dir(persist = \"package-cache\") #> [1] \"~/rave_data/cache_dir//app_tmp\""},{"path":"https://dipterix.org/ravedash/reference/with_log_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate script in the background and show the results from shiny modal dialogue — with_log_modal","title":"Evaluate script in the background and show the results from shiny modal dialogue — with_log_modal","text":"Evaluate script background show results shiny modal dialogue","code":""},{"path":"https://dipterix.org/ravedash/reference/with_log_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate script in the background and show the results from shiny modal dialogue — with_log_modal","text":"","code":"with_log_modal(   expr,   quoted = FALSE,   callback = NULL,   title = \"Running...\",   size = \"l\",   session = shiny::getDefaultReactiveDomain(),   ... )"},{"path":"https://dipterix.org/ravedash/reference/with_log_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate script in the background and show the results from shiny modal dialogue — with_log_modal","text":"expr R expression evaluate script must standalone quoted whether expression quoted callback callback function run evaluate finishes; must take one argument. passed variable evaluation results error condition (error occurs) title, size modal title size, see showModal session shiny session object ... ignored, reserved future use","code":""},{"path":"https://dipterix.org/ravedash/reference/with_log_modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate script in the background and show the results from shiny modal dialogue — with_log_modal","text":"promise object","code":""},{"path":"https://dipterix.org/ravedash/reference/with_log_modal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate script in the background and show the results from shiny modal dialogue — with_log_modal","text":"","code":"# Shiny server function server <- function(input, output, session) {   shiny::bindEvent(     shiny::observe({       with_log_modal(         title = \"Roll the dice\",         expr = {           for(i in 1:10) {             Sys.sleep(runif(1, min = 0.5, max = 2))             cat(sprintf(\"Rolling dice result: %.0f\\n\", sample(6, 1)))           }         }       )       return()     }),     input$btn,     ignoreNULL = TRUE, ignoreInit = TRUE   ) }  if(interactive()) {   shiny::shinyApp(     ui = shiny::basicPage(       shiny::actionButton('btn', \"Click me\")     ),     server = server,     options = list(launch.browser = TRUE)   ) }"},{"path":"https://dipterix.org/ravedash/news/index.html","id":"ravedash-013","dir":"Changelog","previous_headings":"","what":"ravedash 0.1.3","title":"ravedash 0.1.3","text":"Allow preset-components access pipeline instance Added strip_style remove ansi styles Changed logger_error_condition S3 generics Added error_alert similar error_notification, using dipsaus::shiny_alert2 Fixed preset fails correctly validation errors importing channels safe_wrap_expr wraps error handlers Reexported dipsaus shidashi functions users import save_observe better error handling method Raising rave_muffled errors save_observe trigger notifications error alerts, print error details","code":""},{"path":"https://dipterix.org/ravedash/news/index.html","id":"ravedash-012","dir":"Changelog","previous_headings":"","what":"ravedash 0.1.2","title":"ravedash 0.1.2","text":"CRAN release: 2022-10-15 Added presets support importing .nev files recent raveio updates Added shutdown function allow users shutdown instances interface, added single-session mode automatically shutdown server session window closed Fixed loader brain updating issue electrode table empty Allowed run-analysis button placed bottom-left additional styles Added error_notification with_error_notification easily display error messages dashboard Allows modules create session-based temporary files options (experimental) Shorten response time needed fire analysis event Moved htmltools suggests Included free version fontawesome build avoid changes Replaced pickerInput native selectInput condition builder Added start_session start new/existing session one function Added stand-alone viewer support, allowing almost outputs displayed another session full-screen, synchronized main session Added register_output register outputs, get_output_options obtain render details. replaces shiny output assign facilitates stand-alone viewer Added output_gadget output_gadget_container display built-gadgets outputs, allowing users download outputs, display stand-alone viewers; needs little extra setups, must used register_output Added session-level (application) temporary directory files (see temp_dir temp_file), based application-level storage, created session_setopt session_getopt","code":""},{"path":"https://dipterix.org/ravedash/news/index.html","id":"ravedash-011","dir":"Changelog","previous_headings":"","what":"ravedash 0.1.1","title":"ravedash 0.1.1","text":"CRAN release: 2022-06-23 Added NEWS.md file track changes package.","code":""}]
